// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
// Modifications made on 2025-08-14

package serviceprincipals

import (
	"context"
	"encoding/base64"
	"errors"
	"log"
	"time"

	"github.com/hashicorp/go-azure-helpers/lang/pointer"
	"github.com/hashicorp/go-azure-helpers/lang/response"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/common-types/stable"
	"github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal"
	"github.com/valiparsa/terraform-provider-azuread/internal/clients"
	"github.com/valiparsa/terraform-provider-azuread/internal/helpers/consistency"
	"github.com/valiparsa/terraform-provider-azuread/internal/helpers/credentials"
	"github.com/valiparsa/terraform-provider-azuread/internal/helpers/tf"
	"github.com/valiparsa/terraform-provider-azuread/internal/helpers/tf/pluginsdk"
	"github.com/valiparsa/terraform-provider-azuread/internal/helpers/tf/validation"
	"github.com/valiparsa/terraform-provider-azuread/internal/services/serviceprincipals/migrations"
	"github.com/valiparsa/terraform-provider-azuread/internal/services/serviceprincipals/parse"
)

func servicePrincipalPasswordResource() *pluginsdk.Resource {
	return &pluginsdk.Resource{
		CreateContext: servicePrincipalPasswordResourceCreate,
		ReadContext:   servicePrincipalPasswordResourceRead,
		DeleteContext: servicePrincipalPasswordResourceDelete,

		Timeouts: &pluginsdk.ResourceTimeout{
			Create: pluginsdk.DefaultTimeout(5 * time.Minute),
			Read:   pluginsdk.DefaultTimeout(5 * time.Minute),
			Delete: pluginsdk.DefaultTimeout(5 * time.Minute),
		},

		SchemaVersion: 1,
		StateUpgraders: []pluginsdk.StateUpgrader{
			{
				Type:    migrations.ResourceServicePrincipalPasswordInstanceResourceV0().CoreConfigSchema().ImpliedType(),
				Upgrade: migrations.ResourceServicePrincipalPasswordInstanceStateUpgradeV0,
				Version: 0,
			},
		},

		Schema: map[string]*pluginsdk.Schema{
			"service_principal_id": {
				Description:  "The ID of the service principal for which this password should be created",
				Type:         pluginsdk.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: stable.ValidateServicePrincipalID,
			},

			"display_name": {
				Description: "A display name for the password",
				Type:        pluginsdk.TypeString,
				Optional:    true,
				Computed:    true,
				ForceNew:    true,
			},

			"start_date": {
				Description:  "The start date from which the password is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the current date is used",
				Type:         pluginsdk.TypeString,
				Optional:     true,
				Computed:     true,
				ForceNew:     true,
				ValidateFunc: validation.IsRFC3339Time,
			},

			"end_date": {
				Description:   "The end date until which the password is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`)",
				Type:          pluginsdk.TypeString,
				Optional:      true,
				Computed:      true,
				ForceNew:      true,
				ConflictsWith: []string{"end_date_relative"},
				ValidateFunc:  validation.IsRFC3339Time,
			},

			"end_date_relative": {
				Description:   "A relative duration for which the password is valid until, for example `240h` (10 days) or `2400h30m`. Changing this field forces a new resource to be created",
				Type:          pluginsdk.TypeString,
				Optional:      true,
				ForceNew:      true,
				ConflictsWith: []string{"end_date"},
				ValidateFunc:  validation.StringIsNotEmpty,
				Deprecated:    "The `end_date_relative` property is deprecated and will be removed in a future version of the AzureAD provider. Please instead use the Terraform `timeadd()` function to calculate a value for the `end_date` property.",
			},

			"rotate_when_changed": {
				Description: "Arbitrary map of values that, when changed, will trigger rotation of the password",
				Type:        pluginsdk.TypeMap,
				Optional:    true,
				ForceNew:    true,
				Elem: &pluginsdk.Schema{
					Type: pluginsdk.TypeString,
				},
			},

			"key_id": {
				Description: "A UUID used to uniquely identify this password credential",
				Type:        pluginsdk.TypeString,
				Computed:    true,
			},

			"value": {
				Description: "The password for this service principal, which is generated by Azure Active Directory",
				Type:        pluginsdk.TypeString,
				Computed:    true,
				Sensitive:   true,
			},
		},
	}
}

func servicePrincipalPasswordResourceCreate(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).ServicePrincipals.ServicePrincipalClient

	servicePrincipalId, err := stable.ParseServicePrincipalID(d.Get("service_principal_id").(string))
	if err != nil {
		return tf.ErrorDiagPathF(err, "service_principal_id", "Parsing `service_principal_id`")
	}

	credential, err := credentials.PasswordCredentialForResource(d)
	if err != nil {
		attr := ""
		if kerr, ok := err.(credentials.CredentialError); ok {
			attr = kerr.Attr()
		}
		return tf.ErrorDiagPathF(err, attr, "Generating password credentials for %s", servicePrincipalId)
	}
	if credential == nil {
		return tf.ErrorDiagF(errors.New("nil credential was returned"), "Generating password credentials for %s", servicePrincipalId)
	}

	tf.LockByName(servicePrincipalResourceName, servicePrincipalId.ServicePrincipalId)
	defer tf.UnlockByName(servicePrincipalResourceName, servicePrincipalId.ServicePrincipalId)

	properties := serviceprincipal.AddPasswordRequest{
		PasswordCredential: credential,
	}
	resp, err := client.AddPassword(ctx, *servicePrincipalId, properties, serviceprincipal.DefaultAddPasswordOperationOptions())
	if err != nil {
		return tf.ErrorDiagF(err, "Adding password for %s", servicePrincipalId)
	}

	newCredential := resp.Model
	if newCredential == nil {
		return tf.ErrorDiagF(errors.New("nil credential received when adding password"), "API error adding password for %s", servicePrincipalId)
	}
	if newCredential.KeyId.GetOrZero() == "" {
		return tf.ErrorDiagF(errors.New("nil or empty keyId received"), "API error adding password for %s", servicePrincipalId)
	}
	if newCredential.SecretText.GetOrZero() == "" {
		return tf.ErrorDiagF(errors.New("nil or empty password received"), "API error adding password for %s", servicePrincipalId)
	}

	id := parse.NewCredentialID(servicePrincipalId.ServicePrincipalId, "password", newCredential.KeyId.GetOrZero())

	// Wait for the credential to appear in the service principal manifest, this can take several minutes
	if err = consistency.WaitForUpdate(ctx, func(ctx context.Context) (*bool, error) {
		resp, err := client.GetServicePrincipal(ctx, *servicePrincipalId, serviceprincipal.DefaultGetServicePrincipalOperationOptions())
		if err != nil {
			return pointer.To(false), err
		}

		servicePrincipal := resp.Model
		if servicePrincipal == nil {
			return pointer.To(false), nil
		}

		credential := credentials.GetPasswordCredential(servicePrincipal.PasswordCredentials, id.KeyId)
		return pointer.To(credential != nil), nil
	}); err != nil {
		return tf.ErrorDiagF(err, "Waiting for password credential for %s", servicePrincipalId)
	}

	d.SetId(id.String())
	tf.Set(d, "value", newCredential.SecretText.GetOrZero())

	return servicePrincipalPasswordResourceRead(ctx, d, meta)
}

func servicePrincipalPasswordResourceRead(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).ServicePrincipals.ServicePrincipalClient

	id, err := parse.PasswordID(d.Id())
	if err != nil {
		return tf.ErrorDiagPathF(err, "id", "Parsing password credential with ID %q", d.Id())
	}

	servicePrincipalId := stable.NewServicePrincipalID(id.ObjectId)

	resp, err := client.GetServicePrincipal(ctx, servicePrincipalId, serviceprincipal.DefaultGetServicePrincipalOperationOptions())
	if err != nil {
		if response.WasNotFound(resp.HttpResponse) {
			log.Printf("[DEBUG] %s was not found - removing from state!", servicePrincipalId)
			d.SetId("")
			return nil
		}
		return tf.ErrorDiagPathF(err, "service_principal_id", "Retrieving %s", servicePrincipalId)
	}

	servicePrincipal := resp.Model
	if servicePrincipal == nil {
		return tf.ErrorDiagF(errors.New("model was nil"), "Retrieving %s", servicePrincipalId)
	}

	credential := credentials.GetPasswordCredential(servicePrincipal.PasswordCredentials, id.KeyId)
	if credential == nil {
		log.Printf("[DEBUG] Password credential %q (ID %q) was not found - removing from state!", id.KeyId, id.ObjectId)
		d.SetId("")
		return nil
	}

	if credential.DisplayName != nil {
		tf.Set(d, "display_name", credential.DisplayName.GetOrZero())
	} else if !credential.CustomKeyIdentifier.IsNull() {
		displayName, err := base64.StdEncoding.DecodeString(credential.CustomKeyIdentifier.GetOrZero())
		if err != nil {
			return tf.ErrorDiagPathF(err, "display_name", "Parsing CustomKeyIdentifier")
		}
		tf.Set(d, "display_name", string(displayName))
	}

	tf.Set(d, "key_id", id.KeyId)
	tf.Set(d, "service_principal_id", servicePrincipalId.ID())
	tf.Set(d, "start_date", credential.StartDateTime.GetOrZero())
	tf.Set(d, "end_date", credential.EndDateTime.GetOrZero())

	return nil
}

func servicePrincipalPasswordResourceDelete(ctx context.Context, d *pluginsdk.ResourceData, meta interface{}) pluginsdk.Diagnostics {
	client := meta.(*clients.Client).ServicePrincipals.ServicePrincipalClient

	id, err := parse.PasswordID(d.Id())
	if err != nil {
		return tf.ErrorDiagPathF(err, "id", "Parsing password credential with ID %q", d.Id())
	}

	servicePrincipalId := stable.NewServicePrincipalID(id.ObjectId)

	tf.LockByName(servicePrincipalResourceName, servicePrincipalId.ServicePrincipalId)
	defer tf.UnlockByName(servicePrincipalResourceName, servicePrincipalId.ServicePrincipalId)

	properties := serviceprincipal.RemovePasswordRequest{
		KeyId: pointer.To(id.KeyId),
	}
	if _, err = client.RemovePassword(ctx, servicePrincipalId, properties, serviceprincipal.DefaultRemovePasswordOperationOptions()); err != nil {
		return tf.ErrorDiagF(err, "Removing password credential %q from %s", id.KeyId, servicePrincipalId)
	}

	// Wait for service principal password to be deleted
	if err := consistency.WaitForDeletion(ctx, func(ctx context.Context) (*bool, error) {
		resp, err := client.GetServicePrincipal(ctx, servicePrincipalId, serviceprincipal.DefaultGetServicePrincipalOperationOptions())
		if err != nil {
			if response.WasNotFound(resp.HttpResponse) {
				return pointer.To(true), nil
			}
			return nil, err
		}

		servicePrincipal := resp.Model
		if servicePrincipal == nil {
			return pointer.To(false), nil
		}

		credential := credentials.GetPasswordCredential(servicePrincipal.PasswordCredentials, id.KeyId)
		return pointer.To(credential != nil), nil
	}); err != nil {
		return tf.ErrorDiagF(err, "Waiting for deletion of password credential %q from service principal with object ID %q", id.KeyId, id.ObjectId)
	}

	return nil
}
